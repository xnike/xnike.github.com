<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blackberry 10 | My Octopress Blog]]></title>
  <link href="http://xnike.github.com/blog/categories/blackberry-10/atom.xml" rel="self"/>
  <link href="http://xnike.github.com/"/>
  <updated>2013-11-18T20:16:27+04:00</updated>
  <id>http://xnike.github.com/</id>
  <author>
    <name><![CDATA[xnike]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blackberry 10: Changing application theme in runtime]]></title>
    <link href="http://xnike.github.com/blog/2013/08/13/blackberry-10-changing-application-theme-in-runtime/"/>
    <updated>2013-08-13T23:15:00+04:00</updated>
    <id>http://xnike.github.com/blog/2013/08/13/blackberry-10-changing-application-theme-in-runtime</id>
    <content type="html"><![CDATA[<p>Do you want to change an application theme (from bright to dark and back)? Yes, you can.</br>
Do you want to do it in the runtime? No, you can not; a user has to restart the application to apply new theme.</p>

<p>You can easily implement this as it is done in, for example, <a href="http://appworld.blackberry.com/webstore/content/2817/">FancyTran</a>.
The application should update the installed application bar-descriptor.xml file according to the <a href="http://developer.blackberry.com/cascades/reference/bb__cascades__visualstyle.html">VisualStyle</a>.</br>
<strong>Note</strong>: this trick is worked only with old notation:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cascadesTheme>dark&lt;/cascadesTheme></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Add following code snippets to appropriate project files:</p>

<p><code>cpp applicationui.hpp
Q_INVOKABLE void changeTheme(int type);
</code></p>

<p>``` cpp applicationui.cpp
void ApplicationUI::changeTheme(int type) {</p>

<pre><code>    if (1 != type &amp;&amp; 2 != type) {
            return;
    }

    const QString values[] = {"&lt;cascadesTheme&gt;bright&lt;/cascadesTheme&gt;", "&lt;cascadesTheme&gt;dark&lt;/cascadesTheme&gt;"};
    QFile file("app/native/bar-descriptor.xml");
    QByteArray content;

    if (!file.open(QIODevice::ReadOnly)) {
            return;
    } else {
            content = file.readAll();
            file.close();
    }

    if (content.length()) {
            if (!content.contains(values[type - 1].toAscii())) {
                    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
                            return;
                    } else {
                            if (content.contains(values[type % 2].toAscii())) {
                                    content = content.replace(values[type % 2].toAscii(), values[type - 1].toAscii());
                            } else {
                                    content = content.replace("&lt;/qnx&gt;", (values[type - 1] + "\n&lt;/qnx&gt;").toAscii());
                            }

                            file.write(content);
                            file.close();
                    }
            }
    }
</code></pre>

<p>}
```</p>

<p>So, if you export application instance as context property in the applicationui.cpp
<code>
qml-&gt;setContextProperty("App", this);
</code>
you can invoke implemented method from the QML:
```
....</p>

<p>DropDown {</p>

<pre><code>id: themeDropDown
title: qsTr("Theme") + Retranslate.onLocaleOrLanguageChanged

Option {
    text: qsTr("Bright") + Retranslate.onLocaleOrLanguageChanged
    value: VisualStyle.Bright
    selected: VisualStyle.Bright == Application.themeSupport.theme.colorTheme.style
}

Option {
    text: qsTr("Dark") + Retranslate.onLocaleOrLanguageChanged
    value: VisualStyle.Dark
    selected: VisualStyle.Dark == Application.themeSupport.theme.colorTheme.style
}
</code></pre>

<p>}</p>

<p>....</p>

<p>onSomething: {</p>

<pre><code>App.changeTheme(themeDropDown.selectedValue);
</code></pre>

<p>}
```</p>

<p>Restart application and enjoy chosen theme.</p>
]]></content>
  </entry>
  
</feed>
