<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cascades | My Octopress Blog]]></title>
  <link href="http://xnike.github.com/blog/categories/cascades/atom.xml" rel="self"/>
  <link href="http://xnike.github.com/"/>
  <updated>2013-11-18T20:16:27+04:00</updated>
  <id>http://xnike.github.com/</id>
  <author>
    <name><![CDATA[xnike]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blackberry 10: Changing application theme in runtime]]></title>
    <link href="http://xnike.github.com/blog/2013/08/13/blackberry-10-changing-application-theme-in-runtime/"/>
    <updated>2013-08-13T23:15:00+04:00</updated>
    <id>http://xnike.github.com/blog/2013/08/13/blackberry-10-changing-application-theme-in-runtime</id>
    <content type="html"><![CDATA[<p>Do you want to change an application theme (from bright to dark and back)? Yes, you can.</br>
Do you want to do it in the runtime? No, you can not; a user has to restart the application to apply new theme.</p>

<p>You can easily implement this as it is done in, for example, <a href="http://appworld.blackberry.com/webstore/content/2817/">FancyTran</a>.
The application should update the installed application bar-descriptor.xml file according to the <a href="http://developer.blackberry.com/cascades/reference/bb__cascades__visualstyle.html">VisualStyle</a>.</br>
<strong>Note</strong>: this trick is worked only with old notation:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cascadesTheme>dark&lt;/cascadesTheme></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Add following code snippets to appropriate project files:</p>

<p><code>cpp applicationui.hpp
Q_INVOKABLE void changeTheme(int type);
</code></p>

<p>``` cpp applicationui.cpp
void ApplicationUI::changeTheme(int type) {</p>

<pre><code>    if (1 != type &amp;&amp; 2 != type) {
            return;
    }

    const QString values[] = {"&lt;cascadesTheme&gt;bright&lt;/cascadesTheme&gt;", "&lt;cascadesTheme&gt;dark&lt;/cascadesTheme&gt;"};
    QFile file("app/native/bar-descriptor.xml");
    QByteArray content;

    if (!file.open(QIODevice::ReadOnly)) {
            return;
    } else {
            content = file.readAll();
            file.close();
    }

    if (content.length()) {
            if (!content.contains(values[type - 1].toAscii())) {
                    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
                            return;
                    } else {
                            if (content.contains(values[type % 2].toAscii())) {
                                    content = content.replace(values[type % 2].toAscii(), values[type - 1].toAscii());
                            } else {
                                    content = content.replace("&lt;/qnx&gt;", (values[type - 1] + "\n&lt;/qnx&gt;").toAscii());
                            }

                            file.write(content);
                            file.close();
                    }
            }
    }
</code></pre>

<p>}
```</p>

<p>So, if you export application instance as context property in the applicationui.cpp
<code>
qml-&gt;setContextProperty("App", this);
</code>
you can invoke implemented method from the QML:
```
....</p>

<p>DropDown {</p>

<pre><code>id: themeDropDown
title: qsTr("Theme") + Retranslate.onLocaleOrLanguageChanged

Option {
    text: qsTr("Bright") + Retranslate.onLocaleOrLanguageChanged
    value: VisualStyle.Bright
    selected: VisualStyle.Bright == Application.themeSupport.theme.colorTheme.style
}

Option {
    text: qsTr("Dark") + Retranslate.onLocaleOrLanguageChanged
    value: VisualStyle.Dark
    selected: VisualStyle.Dark == Application.themeSupport.theme.colorTheme.style
}
</code></pre>

<p>}</p>

<p>....</p>

<p>onSomething: {</p>

<pre><code>App.changeTheme(themeDropDown.selectedValue);
</code></pre>

<p>}
```</p>

<p>Restart application and enjoy chosen theme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cascades for Blackberry 10. Theme based asset selector]]></title>
    <link href="http://xnike.github.com/blog/2012/12/19/cascades-for-blackberry-10-theme-based-asset-selector/"/>
    <updated>2012-12-19T16:58:00+04:00</updated>
    <id>http://xnike.github.com/blog/2012/12/19/cascades-for-blackberry-10-theme-based-asset-selector</id>
    <content type="html"><![CDATA[<p>Upcoming Blackberry 10 release will have full theme support. According to the <a href="https://developer.blackberry.com/cascades/reference/bb__cascades__themesupport.html">API Documentation</a> there are Brigth and Dark themes:
<img class="center" src="https://developer.blackberry.com/cascades/files/reference/images/theme_examples.png"></p>

<p>The default theme is Bright. To change the application theme to Dark specify the following configuration value in the application`s bar-descriptor.xml file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;env var="CASCADES_THEME" value="dark"/></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>or previously</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cascadesTheme>dark&lt;/cascadesTheme></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If You have, for example, a background image for each of the available themes - "asset:///images/bright/background.png" and "asset:///images/dark/background.png" - You can easily manage it by adding a globally available property:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">bb</span><span class="p">.</span><span class="nx">cascades</span> <span class="mf">1.0</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Page</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">id</span><span class="o">:</span> <span class="nx">mainPage</span><span class="p">;</span>
</span><span class='line'><span class="c1">// this property will contain string representation of the current application theme.</span>
</span><span class='line'><span class="nx">property</span> <span class="nx">string</span> <span class="nx">theme</span><span class="o">:</span> <span class="nx">themeStyleToString</span><span class="p">(</span><span class="nx">Application</span><span class="p">.</span><span class="nx">themeSupport</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">colorTheme</span><span class="p">.</span><span class="nx">style</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Container</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ImageView</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">imageSource</span><span class="o">:</span> <span class="s2">&quot;asset:///images/&quot;</span> <span class="o">+</span> <span class="nx">mainPage</span><span class="p">.</span><span class="nx">theme</span> <span class="o">+</span> <span class="s2">&quot;/background.png&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">themeStyleToString</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">VisualStyle</span><span class="p">.</span><span class="nx">Bright</span><span class="o">:</span>    <span class="k">return</span> <span class="s2">&quot;bright&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">VisualStyle</span><span class="p">.</span><span class="nx">Dark</span><span class="o">:</span>      <span class="k">return</span> <span class="s2">&quot;dark&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// will use dark as default in case of unknown</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;dark&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately, right now I know only one way to change the application theme - via bar-descriptor.xml.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building POCO to use with BBNDK]]></title>
    <link href="http://xnike.github.com/blog/2012/11/11/building-poco-to-use-with-bbndk/"/>
    <updated>2012-11-11T19:38:00+04:00</updated>
    <id>http://xnike.github.com/blog/2012/11/11/building-poco-to-use-with-bbndk</id>
    <content type="html"><![CDATA[<p>On the GitHub page of <a href="https://github.com/falcon4ever/openFrameworks/tree/developPlayBook/addons/ofxQNX/libs/poco/Sources">OpenFramework project</a> there is a guide that shows how to build <a href="http://pocoproject.org">POCO C++ libraries</a> for Blackberry 10 and Playbook on your Linux or Mac OS box.</p>

<p>These steps are:</p>

<ol>
<li><p>Download and install the BlackBerry Native SDK for your platform from the <a href="https://developer.blackberry.com/cascades/download/">Cascade</a> or <a href="http://developer.blackberry.com/native/download/">Native</a> downloads page.</p></li>
<li><p>Download a stable release from the project <a href="http://pocoproject.org/download/index.html">downloads page</a>. Basic Edition is enough because crypto, mysql, odbc, openssl support will be ommited during the build process. For now, the latest release is <a href="https://sourceforge.net/projects/poco/files/sources/poco-1.4.4/poco-1.4.4.tar.gz/download">1.4.4</a>.</p></li>
<li><p>Extract the downloaded archive file.</p></li>
<li><p>Create directories for one or several of the available building targets for which you need to compile the library: BB10 simulator, BB10 target, Playbook simulator, Playbook target.</p></li>
<li><p>Download the appropriate configuration profile(s) <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-bb10-sim">BB10 simulator</a>, <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-bb10-device">BB10 target</a>, <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-playbook-sim">Playbook simulator</a>, <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-playbook-device">Playbook target</a> and store it (them) to the "Unpacked POCO root"\build\config directory.</p></li>
<li><p>Download <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/syslog.h">syslog.h</a> and copy it to "SDK root"\target\qnx6\usr\include directory.</p></li>
<li><p>Build library for the chosen configuration profile and then add it to your project.</p></li>
</ol>


<p>Load the environment variables for the console session:
<code>
source "SDK root"/bbndk-env.sh
</code>
Configuring build:
<code>
cd "Unpacked POCO root"
./configure --config="Profile file name" --omit=NetSSL_OpenSSL,Crypto,Data/ODBC,Data/MySQL --no-tests --no-samples --static --prefix="Profile result directory"
</code>
Compiling and installing result of the build in the "Profile result directory":
<code>
make -s
make install
</code></p>
]]></content>
  </entry>
  
</feed>
