<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://xnike.github.com/atom.xml" rel="self"/>
  <link href="http://xnike.github.com/"/>
  <updated>2013-06-02T19:16:30+04:00</updated>
  <id>http://xnike.github.com/</id>
  <author>
    <name><![CDATA[xnike]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java: inlining primitive types and Strings]]></title>
    <link href="http://xnike.github.com/blog/2013/06/02/java-inlining-primitive-types-and-strings/"/>
    <updated>2013-06-02T17:47:00+04:00</updated>
    <id>http://xnike.github.com/blog/2013/06/02/java-inlining-primitive-types-and-strings</id>
    <content type="html"><![CDATA[<p>At this moment, almost all IDEs and build systems can and actively use an increment build, i.e. recompile only changed files; so one time you could face the following issue: you change value of a constant in a one class, but get original value when use it in the another class.</p>

<p>Assume we have the piece of code in 2 class files correspondingly:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A.s = &quot;</span> <span class="o">+</span> <span class="n">A</span><span class="o">.</span><span class="na">s</span> <span class="o">+</span> <span class="s">&quot;, A.i = &quot;</span> <span class="o">+</span> <span class="n">A</span><span class="o">.</span><span class="na">i</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After compiling classes and running, we get output:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>javac A.java <span class="o">&amp;&amp;</span> javac B.java <span class="o">&amp;&amp;</span> java B
</span><span class='line'>A.s <span class="o">=</span> A, A.i <span class="o">=</span> 1
</span></code></pre></td></tr></table></div></figure>


<p>In case of changing constants in A, recompiling it (only A.java) and then running B, we will receive the previous result. It&#8217;s because compiler goes through constants in the class and checks each member whether or not it is an expression possible to compute at the compile time or the run time. A constant with the compile time computable value is a target for inlining.</p>

<p>Let&#8217;s edit the A class int the following way:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then recompile and run:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>javac A.java <span class="o">&amp;&amp;</span> javac B.java <span class="o">&amp;&amp;</span> java B
</span><span class='line'>A.s <span class="o">=</span> A, A.i <span class="o">=</span> 1
</span></code></pre></td></tr></table></div></figure>


<p>In case of changing constants in A and recompling only A, every running B we will receive correct constants values.
You can easily find what are the differencies in the bytecodes of the two versions of produced classes by using standart JDK utility javap.</p>

<p>For example, for the first version of A class we get:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>javap -c A
</span><span class='line'>Compiled from <span class="s2">&quot;A.java&quot;</span>
</span><span class='line'>public class A <span class="o">{</span>
</span><span class='line'>  public static final java.lang.String s;
</span><span class='line'>
</span><span class='line'>  public static final int i;
</span><span class='line'>
</span><span class='line'>  public A<span class="o">()</span>;
</span><span class='line'>    Code:
</span><span class='line'>       0: aload_0
</span><span class='line'>       1: invokespecial <span class="c">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</span><span class='line'>       4: <span class="k">return</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Welcome to the amazing modern Java World.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marmalade SDK and a non-admin user in Win8]]></title>
    <link href="http://xnike.github.com/blog/2013/01/12/marmalade-sdk-and-a-non-admin-user-in-win8/"/>
    <updated>2013-01-12T12:41:00+04:00</updated>
    <id>http://xnike.github.com/blog/2013/01/12/marmalade-sdk-and-a-non-admin-user-in-win8</id>
    <content type="html"><![CDATA[<p>If you installed and configured for together work Visual C++ 2010 Express Edition and Marmalade SDK under Windows 8 and then try to run a &#8220;Hello World&#8221; Marmalade example project by using Windows account without administrative rights, you can find in the console window the following error message <strong>&#8220;Visual Studio 6.0 requested but not found installed (MSDEV.EXE)&#8221;</strong>:</p>

<p><img class="center" src="http://xnike.github.com/images/posts/marmalade01.png"></p>

<p>That is because you have no available configuration for your account, only defaults.</p>

<p>This issue can be easily fixed in two steps:</p>

<ol>
<li>Defining S3E_DIR environment variable:</li>
</ol>


<p>a) create for you account S3E_DIR environment variable points to s3e subdirectory in you Marmalade SDK installation directory
<img class="center" src="http://xnike.github.com/images/posts/marmalade02.png">
b) or change type of this environment variable from &#8220;user variable&#8221; to &#8220;system&#8221; for account from you installed Marmalade SDK
<img class="center" src="http://xnike.github.com/images/posts/marmalade03.png">
2. Configuring Marmalade to use Visual C++ 2010 Express Edition:</p>

<p>a) replace mkb.config file located in %USERPROFILE%\AppData\Roaming\Marmalade\ from the account with administrative rights;</p>

<p>b) or just add to the end of the %USERPROFILE%\AppData\Roaming\Marmalade\mkb.config file following lines</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvct-version=none
</span><span class='line'>default-buildenv=VC10</span></code></pre></td></tr></table></div></figure>


<p>so the entire %USERPROFILE%\AppData\Roaming\Marmalade\mkb.config file will be looked like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>##
</span><span class='line'># Default options for mkb command.
</span><span class='line'># You can specify any of the options listed --help in this file.
</span><span class='line'># For example:
</span><span class='line'>#
</span><span class='line'># buildenv=VC6
</span><span class='line'># no-make
</span><span class='line'>##
</span><span class='line'>rvct-version=none
</span><span class='line'>default-buildenv=VC10</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cascades for Blackberry 10. Theme based asset selector]]></title>
    <link href="http://xnike.github.com/blog/2012/12/19/cascades-for-blackberry-10-theme-based-asset-selector/"/>
    <updated>2012-12-19T16:58:00+04:00</updated>
    <id>http://xnike.github.com/blog/2012/12/19/cascades-for-blackberry-10-theme-based-asset-selector</id>
    <content type="html"><![CDATA[<p>Upcoming Blackberry 10 release will have full theme support. According to the <a href="https://developer.blackberry.com/cascades/reference/bb__cascades__themesupport.html">API Documentation</a> there are Brigth and Dark themes:
<img class="center" src="https://developer.blackberry.com/cascades/files/reference/images/theme_examples.png"></p>

<p>The default theme is Bright. To change the application theme to Dark specify the following configuration value in the application`s bar-descriptor.xml file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;env var="CASCADES_THEME" value="dark"/></span></code></pre></td></tr></table></div></figure>


<p>or previously</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cascadesTheme>dark&lt;/cascadesTheme></span></code></pre></td></tr></table></div></figure>


<p>If You have, for example, a background image for each of the available themes - &#8220;asset:///images/bright/background.png&#8221; and &#8220;asset:///images/dark/background.png&#8221; - You can easily manage it by adding a globally available property:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">bb</span><span class="p">.</span><span class="nx">cascades</span> <span class="mf">1.0</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Page</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="nx">mainPage</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// this property will contain string representation of the current application theme.</span>
</span><span class='line'>    <span class="nx">property</span> <span class="nx">string</span> <span class="nx">theme</span><span class="o">:</span> <span class="nx">themeStyleToString</span><span class="p">(</span><span class="nx">Application</span><span class="p">.</span><span class="nx">themeSupport</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">colorTheme</span><span class="p">.</span><span class="nx">style</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Container</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ImageView</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">imageSource</span><span class="o">:</span> <span class="s2">&quot;asset:///images/&quot;</span> <span class="o">+</span> <span class="nx">mainPage</span><span class="p">.</span><span class="nx">theme</span> <span class="o">+</span> <span class="s2">&quot;/background.png&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">themeStyleToString</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nx">VisualStyle</span><span class="p">.</span><span class="nx">Bright</span><span class="o">:</span>    <span class="k">return</span> <span class="s2">&quot;bright&quot;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nx">VisualStyle</span><span class="p">.</span><span class="nx">Dark</span><span class="o">:</span>      <span class="k">return</span> <span class="s2">&quot;dark&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// will use dark as default in case of unknown</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;dark&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, right now I know only one way to change the application theme - via bar-descriptor.xml.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building POCO to use with BBNDK]]></title>
    <link href="http://xnike.github.com/blog/2012/11/11/building-poco-to-use-with-bbndk/"/>
    <updated>2012-11-11T19:38:00+04:00</updated>
    <id>http://xnike.github.com/blog/2012/11/11/building-poco-to-use-with-bbndk</id>
    <content type="html"><![CDATA[<p>On the GitHub page of <a href="https://github.com/falcon4ever/openFrameworks/tree/developPlayBook/addons/ofxQNX/libs/poco/Sources">OpenFramework project</a> there is a guide that shows how to build <a href="http://pocoproject.org">POCO C++ libraries</a> for Blackberry 10 and Playbook on your Linux or Mac OS box.</p>

<p>These steps are:</p>

<ol>
<li><p>Download and install the BlackBerry Native SDK for your platform from the <a href="https://developer.blackberry.com/cascades/download/">Cascade</a> or <a href="http://developer.blackberry.com/native/download/">Native</a> downloads page.</p></li>
<li><p>Download a stable release from the project <a href="http://pocoproject.org/download/index.html">downloads page</a>. Basic Edition is enough because crypto, mysql, odbc, openssl support will be ommited during the build process. For now, the latest release is <a href="https://sourceforge.net/projects/poco/files/sources/poco-1.4.4/poco-1.4.4.tar.gz/download">1.4.4</a>.</p></li>
<li><p>Extract the downloaded archive file.</p></li>
<li><p>Create directories for one or several of the available building targets for which you need to compile the library: BB10 simulator, BB10 target, Playbook simulator, Playbook target.</p></li>
<li><p>Download the appropriate configuration profile(s) <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-bb10-sim">BB10 simulator</a>, <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-bb10-device">BB10 target</a>, <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-playbook-sim">Playbook simulator</a>, <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/QNX-playbook-device">Playbook target</a> and store it (them) to the &#8220;Unpacked POCO root&#8221;\build\config directory.</p></li>
<li><p>Download <a href="https://github.com/falcon4ever/openFrameworks/blob/developPlayBook/addons/ofxQNX/libs/poco/Sources/syslog.h">syslog.h</a> and copy it to &#8220;SDK root&#8221;\target\qnx6\usr\include directory.</p></li>
<li><p>Build library for the chosen configuration profile and then add it to your project.</p></li>
</ol>


<p>Load the environment variables for the console session:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source "SDK root"/bbndk-env.sh</span></code></pre></td></tr></table></div></figure>


<p>Configuring build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd "Unpacked POCO root"
</span><span class='line'>./configure --config="Profile file name" --omit=NetSSL_OpenSSL,Crypto,Data/ODBC,Data/MySQL --no-tests --no-samples --static --prefix="Profile result directory"</span></code></pre></td></tr></table></div></figure>


<p>Compiling and installing result of the build in the &#8220;Profile result directory&#8221;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make -s
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zzz]]></title>
    <link href="http://xnike.github.com/blog/2012/09/15/zzz/"/>
    <updated>2012-09-15T20:13:00+04:00</updated>
    <id>http://xnike.github.com/blog/2012/09/15/zzz</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
